name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  FLASK_ENV: "testing"

jobs:
  test-finance-core:
    name: Test Finance Core
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        
    - name: Run finance_core tests
      run: |
        poetry run python -m pytest finance_core/test_finance_calculator.py -v --cov=finance_core --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: finance-core
        name: finance-core-coverage

  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        
    - name: Run backend tests
      run: |
        poetry run python -m pytest backend/tests/ -v --cov=backend/app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  test-api-integration:
    name: Test API Integration
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
        
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction --no-root
        
    - name: Start Flask server
      run: |
        cd backend
        poetry run python run.py &
        sleep 10
        
    - name: Test API endpoints
      run: |
        cd backend
        poetry run python test_swagger.py
        
    - name: Test Swagger UI
      run: |
        cd backend
        curl -f http://localhost:5001/health
        curl -f http://localhost:5001/static/swagger.json
        curl -f http://localhost:5001/api/docs

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        pip install black flake8 isort mypy
        
    - name: Check code formatting with Black
      run: |
        black --check --diff finance_core/ backend/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff finance_core/ backend/
        
    - name: Lint with flake8
      run: |
        flake8 finance_core/ backend/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type check with mypy
      run: |
        mypy finance_core/ backend/ --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run bandit security scan
      run: |
        bandit -r finance_core/ backend/ -f json -o bandit-report.json || true
        
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-finance-core]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t valuation-backend:latest .
        
    - name: Test Docker container
      run: |
        cd backend
        docker run -d --name test-backend -p 5001:5001 valuation-backend:latest
        sleep 10
        curl -f http://localhost:5001/health
        docker stop test-backend
        docker rm test-backend

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-finance-core, test-backend, test-api-integration, lint-and-format, security-scan, docker-build]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "One or more CI/CD jobs failed. Please check the logs for details."
        echo "Failed jobs:"
        echo "${{ needs.test-finance-core.result }}"
        echo "${{ needs.test-backend.result }}"
        echo "${{ needs.test-api-integration.result }}"
        echo "${{ needs.lint-and-format.result }}"
        echo "${{ needs.security-scan.result }}"
        echo "${{ needs.docker-build.result }}" 